name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION_MAIN: "3.11"

jobs:
  # =====================================
  # JOB 1: CODE QUALITY & SECURITY
  # =====================================
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python ${{ env.PYTHON_VERSION_MAIN }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION_MAIN }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install safety bandit semgrep
    
    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0
    
    - name: Security scan with Bandit
      run: |
        bandit -r bdfut/ -f json -o bandit-report.json || true
        bandit -r bdfut/ -f txt
    
    - name: Dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # =====================================
  # JOB 2: MULTI-VERSION TESTING
  # =====================================
  test:
    name: Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v \
          --cov=bdfut \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junit-xml=pytest-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-results.xml
          htmlcov/
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == env.PYTHON_VERSION_MAIN
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Check coverage threshold
      if: matrix.python-version == env.PYTHON_VERSION_MAIN
      run: |
        python -c "
        import xml.etree.ElementTree as ET
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        coverage = float(root.get('line-rate')) * 100
        print(f'Coverage: {coverage:.1f}%')
        if coverage < 60:
            print('❌ Coverage below 60% threshold')
            exit(1)
        else:
            print('✅ Coverage meets 60% threshold')
        "
