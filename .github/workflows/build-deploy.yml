name: Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # =====================================
  # JOB 1: BUILD DOCKER IMAGE
  # =====================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # =====================================
  # JOB 2: SECURITY SCAN
  # =====================================
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.build.result == 'success'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # =====================================
  # JOB 3: DEPLOY TO STAGING
  # =====================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && needs.build.result == 'success'
    
    environment:
      name: staging
      url: https://staging.bdfut.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Digest: ${{ needs.build.outputs.image-digest }}"
        # TODO: Implementar deploy real para staging
        echo "âœ… Deploy to staging completed"

  # =====================================
  # JOB 4: INTEGRATION TESTS
  # =====================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always() && needs.deploy-staging.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Run integration tests
      run: |
        echo "ðŸ§ª Running integration tests against staging..."
        # TODO: Implementar testes de integraÃ§Ã£o reais
        echo "âœ… Integration tests passed"

  # =====================================
  # JOB 5: DEPLOY TO PRODUCTION
  # =====================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration-tests]
    if: startsWith(github.ref, 'refs/tags/v') && needs.integration-tests.result == 'success'
    
    environment:
      name: production
      url: https://bdfut.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "Image: ${{ needs.build.outputs.image-tag }}"
        echo "Digest: ${{ needs.build.outputs.image-digest }}"
        # TODO: Implementar deploy real para produÃ§Ã£o
        echo "âœ… Deploy to production completed"
    
    - name: Create deployment summary
      run: |
        echo "## ðŸŽ‰ Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** âœ… Success" >> $GITHUB_STEP_SUMMARY
