name: Dependencies & Security

on:
  schedule:
    # Executa todo domingo às 02:00 UTC
    - cron: '0 2 * * 0'
  push:
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'setup.py'
  pull_request:
    paths:
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'setup.py'
  workflow_dispatch: # Permite execução manual

jobs:
  # =====================================
  # JOB 1: DEPENDENCY AUDIT
  # =====================================
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -e ".[dev]"
    
    - name: Run Safety check
      id: safety
      run: |
        echo "## Safety Security Scan" >> $GITHUB_STEP_SUMMARY
        safety check --json --output safety-report.json || true
        
        if [ -f safety-report.json ]; then
          echo "### Vulnerabilities Found:" >> $GITHUB_STEP_SUMMARY
          cat safety-report.json | jq -r '.vulnerabilities[] | "- **" + .package_name + " " + .installed_version + "**: " + .vulnerability_id + " - " + .advisory' >> $GITHUB_STEP_SUMMARY || true
        fi
        
        safety check --short-report
    
    - name: Run pip-audit
      id: pip-audit
      run: |
        echo "## Pip-Audit Security Scan" >> $GITHUB_STEP_SUMMARY
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --format=markdown >> $GITHUB_STEP_SUMMARY || true
        pip-audit
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  # =====================================
  # JOB 2: DEPENDENCY UPDATE CHECK
  # =====================================
  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
    
    - name: Check for updates
      run: |
        echo "## 📦 Dependency Updates Available" >> $GITHUB_STEP_SUMMARY
        
        # Verificar atualizações no pyproject.toml
        pip list --outdated --format=json > outdated.json
        
        if [ -s outdated.json ] && [ "$(cat outdated.json)" != "[]" ]; then
          echo "### Packages with updates available:" >> $GITHUB_STEP_SUMMARY
          cat outdated.json | jq -r '.[] | "- **" + .name + "**: " + .version + " → " + .latest_version' >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload outdated report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: outdated-dependencies
        path: outdated.json

  # =====================================
  # JOB 3: LICENSE COMPLIANCE
  # =====================================
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -e ".[dev]"
    
    - name: Generate license report
      run: |
        echo "## 📄 License Compliance Report" >> $GITHUB_STEP_SUMMARY
        
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown >> $GITHUB_STEP_SUMMARY
        
        # Verificar licenças problemáticas
        PROBLEMATIC_LICENSES="GPL-3.0,AGPL-3.0,LGPL-3.0"
        
        if pip-licenses --format=json | jq -r '.[].License' | grep -E "$PROBLEMATIC_LICENSES"; then
          echo "⚠️ **WARNING**: Potentially problematic licenses found!" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All licenses are compatible" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload license report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: license-report
        path: licenses.json

  # =====================================
  # JOB 4: DEPENDENCY GRAPH
  # =====================================
  dependency-graph:
    name: Generate Dependency Graph
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipdeptree
        pip install -e ".[dev]"
    
    - name: Generate dependency tree
      run: |
        echo "## 🌳 Dependency Tree" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        pipdeptree >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        
        # Gerar arquivo JSON para análise
        pipdeptree --json > dependency-tree.json
    
    - name: Check for dependency conflicts
      run: |
        if pipdeptree --warn fail; then
          echo "✅ No dependency conflicts found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **WARNING**: Dependency conflicts detected!" >> $GITHUB_STEP_SUMMARY
          pipdeptree --warn fail || true
        fi
    
    - name: Upload dependency tree
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-tree
        path: dependency-tree.json

  # =====================================
  # JOB 5: CREATE SECURITY ISSUE
  # =====================================
  create-security-issue:
    name: Create Security Issue
    runs-on: ubuntu-latest
    needs: [dependency-audit, dependency-updates, license-check]
    if: failure() && github.event_name == 'schedule'
    
    permissions:
      issues: write
    
    steps:
    - name: Create security issue
      uses: actions/github-script@v6
      with:
        script: |
          const title = `🔒 Security Alert: Dependency vulnerabilities detected - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          ## 🚨 Security Alert
          
          Vulnerabilities were detected in project dependencies during the scheduled security scan.
          
          ### Actions Required:
          - [ ] Review security reports in the workflow artifacts
          - [ ] Update vulnerable dependencies
          - [ ] Test updated dependencies
          - [ ] Create hotfix release if critical
          
          ### Workflow Run:
          ${context.payload.workflow_run?.html_url || 'Manual trigger'}
          
          ### Auto-generated by GitHub Actions
          This issue was automatically created by the Dependencies & Security workflow.
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['security', 'dependencies', 'automated']
          });
