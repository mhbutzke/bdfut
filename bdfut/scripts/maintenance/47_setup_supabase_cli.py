#!/usr/bin/env python3
"""
Script para configurar Supabase CLI e criar tabela stages via migra√ß√µes
"""

import os
import sys
import subprocess
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_supabase_cli():
    """Verificar se Supabase CLI est√° instalado"""
    
    logger.info("üîç Verificando se Supabase CLI est√° instalado...")
    
    try:
        result = subprocess.run(['supabase', '--version'], 
                              capture_output=True, text=True, check=True)
        logger.info(f"‚úÖ Supabase CLI encontrado: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError:
        logger.error("‚ùå Supabase CLI n√£o encontrado")
        return False
    except FileNotFoundError:
        logger.error("‚ùå Supabase CLI n√£o est√° instalado")
        return False

def install_supabase_cli():
    """Instalar Supabase CLI"""
    
    logger.info("üì¶ Instalando Supabase CLI...")
    
    try:
        # Tentar instalar via npm
        logger.info("Tentando instalar via npm...")
        subprocess.run(['npm', 'install', '-g', 'supabase'], 
                      check=True, capture_output=True)
        logger.info("‚úÖ Supabase CLI instalado via npm")
        return True
    except subprocess.CalledProcessError:
        logger.warning("‚ö†Ô∏è Falha na instala√ß√£o via npm")
        
        try:
            # Tentar instalar via brew (macOS)
            logger.info("Tentando instalar via brew...")
            subprocess.run(['brew', 'install', 'supabase/tap/supabase'], 
                          check=True, capture_output=True)
            logger.info("‚úÖ Supabase CLI instalado via brew")
            return True
        except subprocess.CalledProcessError:
            logger.error("‚ùå Falha na instala√ß√£o via brew")
            return False

def init_supabase_project():
    """Inicializar projeto Supabase"""
    
    logger.info("üöÄ Inicializando projeto Supabase...")
    
    try:
        # Verificar se j√° existe diret√≥rio supabase
        if os.path.exists('supabase'):
            logger.info("üìÅ Diret√≥rio supabase j√° existe")
            return True
        
        # Inicializar projeto
        result = subprocess.run(['supabase', 'init'], 
                              capture_output=True, text=True, check=True)
        logger.info("‚úÖ Projeto Supabase inicializado")
        logger.info(f"Output: {result.stdout}")
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erro ao inicializar projeto: {e}")
        logger.error(f"Stderr: {e.stderr}")
        return False

def login_supabase():
    """Fazer login no Supabase"""
    
    logger.info("üîê Fazendo login no Supabase...")
    
    try:
        # Usar token de acesso pessoal
        access_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFvcWVzaHl1d214ZnJqZGtod2lpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NzY5MzE3NCwiZXhwIjoyMDczMjY5MTc0fQ.QPgk88JViYHXekcJwsHtBgIU7CjKWx1ZUkd1nEkRGoQ"
        
        # Definir vari√°vel de ambiente
        env = os.environ.copy()
        env['SUPABASE_ACCESS_TOKEN'] = access_token
        
        result = subprocess.run(['supabase', 'login'], 
                              input=access_token, text=True,
                              capture_output=True, check=True, env=env)
        logger.info("‚úÖ Login realizado com sucesso")
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erro no login: {e}")
        logger.error(f"Stderr: {e.stderr}")
        return False

def link_supabase_project():
    """Linkar projeto Supabase"""
    
    logger.info("üîó Linkando projeto Supabase...")
    
    try:
        project_ref = "qoqeshyuwmxfrjdkhwii"
        
        result = subprocess.run(['supabase', 'link', '--project-ref', project_ref], 
                              capture_output=True, text=True, check=True)
        logger.info("‚úÖ Projeto linkado com sucesso")
        logger.info(f"Output: {result.stdout}")
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erro ao linkar projeto: {e}")
        logger.error(f"Stderr: {e.stderr}")
        return False

def create_stages_migration():
    """Criar migra√ß√£o para tabela stages"""
    
    logger.info("üìù Criando migra√ß√£o para tabela stages...")
    
    try:
        # Criar nova migra√ß√£o
        result = subprocess.run(['supabase', 'migration', 'new', 'create_stages_table'], 
                              capture_output=True, text=True, check=True)
        
        migration_file = result.stdout.strip()
        logger.info(f"‚úÖ Migra√ß√£o criada: {migration_file}")
        
        # Escrever SQL na migra√ß√£o
        sql_content = """
create table if not exists public.stages (
    id bigint primary key generated always as identity,
    sportmonks_id integer unique not null,
    sport_id integer,
    country_id integer,
    league_id integer,
    season_id integer,
    type_id integer,
    name text,
    short_code text,
    sort_order integer,
    finished boolean default false,
    is_current boolean default false,
    starting_at timestamptz,
    ending_at timestamptz,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);
"""
        
        # Encontrar arquivo de migra√ß√£o mais recente
        migrations_dir = "supabase/migrations"
        if os.path.exists(migrations_dir):
            migration_files = [f for f in os.listdir(migrations_dir) if f.endswith('.sql')]
            if migration_files:
                latest_migration = max(migration_files)
                migration_path = os.path.join(migrations_dir, latest_migration)
                
                with open(migration_path, 'w') as f:
                    f.write(sql_content)
                
                logger.info(f"‚úÖ SQL adicionado √† migra√ß√£o: {migration_path}")
                return True
        
        logger.error("‚ùå N√£o foi poss√≠vel encontrar arquivo de migra√ß√£o")
        return False
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erro ao criar migra√ß√£o: {e}")
        logger.error(f"Stderr: {e.stderr}")
        return False

def push_migration():
    """Fazer push da migra√ß√£o para o banco remoto"""
    
    logger.info("üöÄ Fazendo push da migra√ß√£o...")
    
    try:
        result = subprocess.run(['supabase', 'db', 'push'], 
                              capture_output=True, text=True, check=True)
        logger.info("‚úÖ Migra√ß√£o enviada com sucesso")
        logger.info(f"Output: {result.stdout}")
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erro ao fazer push: {e}")
        logger.error(f"Stderr: {e.stderr}")
        return False

def main():
    """Fun√ß√£o principal"""
    
    logger.info("=" * 80)
    logger.info("üöÄ CONFIGURANDO SUPABASE CLI PARA CRIAR TABELA STAGES")
    logger.info("=" * 80)
    
    # Verificar se CLI est√° instalado
    if not check_supabase_cli():
        logger.info("üì¶ Tentando instalar Supabase CLI...")
        if not install_supabase_cli():
            logger.error("‚ùå N√£o foi poss√≠vel instalar Supabase CLI")
            logger.info("üí° Instale manualmente: https://supabase.com/docs/guides/cli/getting-started")
            return
    
    # Inicializar projeto
    if not init_supabase_project():
        logger.error("‚ùå Falha na inicializa√ß√£o do projeto")
        return
    
    # Fazer login
    if not login_supabase():
        logger.error("‚ùå Falha no login")
        return
    
    # Linkar projeto
    if not link_supabase_project():
        logger.error("‚ùå Falha ao linkar projeto")
        return
    
    # Criar migra√ß√£o
    if not create_stages_migration():
        logger.error("‚ùå Falha ao criar migra√ß√£o")
        return
    
    # Fazer push da migra√ß√£o
    if not push_migration():
        logger.error("‚ùå Falha ao fazer push da migra√ß√£o")
        return
    
    logger.info("=" * 80)
    logger.info("‚úÖ TABELA STAGES CRIADA COM SUCESSO!")
    logger.info("üéâ Agora voc√™ pode inserir os dados dos stages!")
    logger.info("=" * 80)

if __name__ == "__main__":
    main()
