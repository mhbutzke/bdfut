#!/usr/bin/env python3
"""
Teste Simples do Batch Processing
=================================

Teste b√°sico para validar a implementa√ß√£o do batch processing
sem depend√™ncias externas.
"""

import os
import sys

# Configura vari√°veis de ambiente para teste
os.environ['SPORTMONKS_API_KEY'] = 'test_token_123'
os.environ['SUPABASE_CONNECTION_STRING'] = 'postgresql://test:test@localhost:5432/testdb'

# Adiciona o diret√≥rio pai ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_batch_collector_import():
    """Testa se o m√≥dulo pode ser importado"""
    try:
        from etl.batch_collector import BatchCollector, SportmonksBatchAPI
        print("‚úÖ M√≥dulo batch_collector importado com sucesso")
        return True
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulo: {e}")
        return False

def test_sportmonks_api_creation():
    """Testa cria√ß√£o da API"""
    try:
        from etl.batch_collector import SportmonksBatchAPI
        api = SportmonksBatchAPI('test_token')
        print("‚úÖ SportmonksBatchAPI criada com sucesso")
        print(f"   Base URL: {api.BASE_URL}")
        print(f"   Max Batch Size: {api.MAX_BATCH_SIZE}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar API: {e}")
        return False

def test_batch_collector_creation():
    """Testa cria√ß√£o do coletor"""
    try:
        from etl.batch_collector import BatchCollector
        collector = BatchCollector('test_token', 'test_connection')
        print("‚úÖ BatchCollector criado com sucesso")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar coletor: {e}")
        return False

def test_config_validation():
    """Testa valida√ß√£o de configura√ß√£o"""
    try:
        from etl.config import ETLConfig
        is_valid = ETLConfig.validate()
        if is_valid:
            print("‚úÖ Configura√ß√£o validada com sucesso")
        else:
            print("‚ö†Ô∏è  Configura√ß√£o de teste detectada")
        return True
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üß™ Teste Simples do Batch Processing")
    print("=" * 40)
    
    tests = [
        ("Importa√ß√£o do m√≥dulo", test_batch_collector_import),
        ("Cria√ß√£o da API", test_sportmonks_api_creation),
        ("Cria√ß√£o do coletor", test_batch_collector_creation),
        ("Valida√ß√£o de configura√ß√£o", test_config_validation),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}:")
        try:
            if test_func():
                passed += 1
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
    
    print("\n" + "=" * 40)
    print(f"üìä Resultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todos os testes passaram! Implementa√ß√£o b√°sica est√° funcionando.")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique os erros acima.")
    
    print("\nüí° Pr√≥ximos passos:")
    print("   ‚Ä¢ Configurar vari√°veis de ambiente reais")
    print("   ‚Ä¢ Testar com dados reais da API Sportmonks")
    print("   ‚Ä¢ Integrar com sistema de monitoramento")

if __name__ == "__main__":
    main()
