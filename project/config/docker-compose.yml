# ============================================
# BDFut Docker Compose - Ambiente Completo
# ============================================
# Configuração completa para desenvolvimento, teste e produção

version: '3.8'

# ============================================
# SERVICES DEFINITION
# ============================================
services:
  
  # ==========================================
  # PRODUCTION SERVICE
  # ==========================================
  bdfut:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: bdfut-app
    environment:
      - BDFUT_ENV=${BDFUT_ENV:-production}
      - SPORTMONKS_API_KEY=${SPORTMONKS_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - bdfut_logs:/app/logs
      - bdfut_data:/app/data
      - ./.env:/app/.env:ro
    command: python -m bdfut.cli sync-base
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bdfut-network
    labels:
      - "com.bdfut.service=app"
      - "com.bdfut.environment=production"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================
  # DEVELOPMENT SERVICE
  # ==========================================
  bdfut-dev:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: bdfut-dev
    environment:
      - BDFUT_ENV=development
      - SPORTMONKS_API_KEY=${SPORTMONKS_API_KEY_DEV:-${SPORTMONKS_API_KEY}}
      - SUPABASE_URL=${SUPABASE_URL_DEV:-${SUPABASE_URL}}
      - SUPABASE_KEY=${SUPABASE_KEY_DEV:-${SUPABASE_KEY}}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=DEBUG
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - .:/app
      - bdfut_logs_dev:/app/logs
      - bdfut_data_dev:/app/data
      - /app/__pycache__  # Exclude pycache
    ports:
      - "8000:8000"  # Para API futura
    command: python -m bdfut.cli show-config
    restart: "no"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bdfut-network
    labels:
      - "com.bdfut.service=app"
      - "com.bdfut.environment=development"

  # ==========================================
  # TESTING SERVICE
  # ==========================================
  bdfut-test:
    build:
      context: .
      target: testing
      dockerfile: Dockerfile
    container_name: bdfut-test
    environment:
      - BDFUT_ENV=test
      - SPORTMONKS_API_KEY=test_key_12345
      - SUPABASE_URL=https://test.supabase.co
      - SUPABASE_KEY=test_key_12345
      - REDIS_URL=redis://redis:6379
      - PYTHONDONTWRITEBYTECODE=1
    volumes:
      - .:/app
      - test_results:/app/test-results
    command: pytest tests/ -v --cov=bdfut --cov-report=html --cov-report=xml
    restart: "no"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bdfut-network
    labels:
      - "com.bdfut.service=test"
      - "com.bdfut.environment=test"

  # ==========================================
  # REDIS CACHE SERVICE
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: bdfut-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 60 1
      --loglevel notice
    restart: unless-stopped
    networks:
      - bdfut-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      - "com.bdfut.service=cache"
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # ==========================================
  # JUPYTER NOTEBOOKS SERVICE
  # ==========================================
  jupyter:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: bdfut-jupyter
    environment:
      - BDFUT_ENV=development
      - SPORTMONKS_API_KEY=${SPORTMONKS_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - REDIS_URL=redis://redis:6379
      - JUPYTER_ENABLE_LAB=yes
    ports:
      - "${JUPYTER_PORT:-8888}:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./bdfut:/app/bdfut:ro
      - bdfut_data:/app/data:ro
      - jupyter_data:/home/bdfut/.jupyter
    command: >
      bash -c "
        pip install jupyterlab &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
        --ServerApp.token='' --ServerApp.password=''
      "
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - bdfut-network
    labels:
      - "com.bdfut.service=jupyter"
      - "com.bdfut.environment=development"

  # ==========================================
  # MONITORING - PROMETHEUS
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: bdfut-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - bdfut-network
    labels:
      - "com.bdfut.service=monitoring"
    profiles:
      - monitoring

  # ==========================================
  # MONITORING - GRAFANA
  # ==========================================
  grafana:
    image: grafana/grafana:latest
    container_name: bdfut-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - bdfut-network
    labels:
      - "com.bdfut.service=monitoring"
    profiles:
      - monitoring

# ============================================
# NAMED VOLUMES
# ============================================
volumes:
  # Application data
  bdfut_logs:
    driver: local
    labels:
      - "com.bdfut.volume=logs"
  bdfut_data:
    driver: local
    labels:
      - "com.bdfut.volume=data"
  bdfut_logs_dev:
    driver: local
    labels:
      - "com.bdfut.volume=logs-dev"
  bdfut_data_dev:
    driver: local
    labels:
      - "com.bdfut.volume=data-dev"
  
  # Cache and databases
  redis_data:
    driver: local
    labels:
      - "com.bdfut.volume=cache"
  
  # Development tools
  jupyter_data:
    driver: local
    labels:
      - "com.bdfut.volume=jupyter"
  test_results:
    driver: local
    labels:
      - "com.bdfut.volume=test-results"
  
  # Monitoring
  prometheus_data:
    driver: local
    labels:
      - "com.bdfut.volume=monitoring"
  grafana_data:
    driver: local
    labels:
      - "com.bdfut.volume=monitoring"

# ============================================
# NETWORKS
# ============================================
networks:
  bdfut-network:
    driver: bridge
    name: bdfut-network
    labels:
      - "com.bdfut.network=main"