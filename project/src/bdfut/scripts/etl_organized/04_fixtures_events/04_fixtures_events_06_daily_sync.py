#!/usr/bin/env python3
"""
04_fixtures_events_06_daily_sync.py
===================================

Script de sincroniza√ß√£o di√°ria incremental para manter dados atualizados.

DEPEND√äNCIAS:
- Sistema de cache Redis funcionando
- Tabelas de metadados ETL criadas
- Dados base populados

FUNCIONALIDADE:
- Sincroniza√ß√£o incremental inteligente
- Detec√ß√£o autom√°tica de mudan√ßas
- Otimiza√ß√£o com cache Redis
- Monitoramento com metadados ETL
- Sistema de agendamento autom√°tico
"""

import os
import sys
import time
import logging
import schedule
from datetime import datetime, timedelta
from typing import Dict, Any

# Adicionar o diret√≥rio bdfut ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', '..', '..'))

from bdfut.core.incremental_sync import IncrementalSyncManager, ScheduledSyncRunner

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'bdfut/logs/daily_sync_{datetime.now().strftime("%Y%m%d")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


def run_daily_sync_once():
    """Executa uma sincroniza√ß√£o di√°ria √∫nica"""
    logger.info("üåÖ SINCRONIZA√á√ÉO DI√ÅRIA INICIADA")
    logger.info("=" * 50)
    
    try:
        # Inicializar gerenciador
        sync_manager = IncrementalSyncManager(use_redis=True)
        
        # Executar sincroniza√ß√£o di√°ria
        results = sync_manager.run_daily_sync(include_standings=True)
        
        # Log dos resultados
        logger.info("üìä RESULTADOS DA SINCRONIZA√á√ÉO:")
        
        if results['fixtures_sync']:
            fixtures_stats = results['fixtures_sync']
            if not fixtures_stats.get('skipped', False):
                logger.info(f"  üèÜ Fixtures: {fixtures_stats.get('fixtures_processed', 0)} processadas")
            else:
                logger.info(f"  üèÜ Fixtures: Pulada - {fixtures_stats.get('reason', 'N/A')}")
        
        if results['standings_sync']:
            standings_stats = results['standings_sync']
            logger.info(f"  üìä Classifica√ß√µes: {standings_stats.get('standings_synced', 0)} entradas")
        
        if results['base_data_sync']:
            base_stats = results['base_data_sync']
            total_base = (base_stats.get('countries_synced', 0) + 
                         base_stats.get('states_synced', 0) + 
                         base_stats.get('types_synced', 0))
            logger.info(f"  üìã Dados base: {total_base} registros")
        
        success = results.get('overall_success', False)
        duration = results.get('duration_seconds', 0)
        
        logger.info(f"‚úÖ Status: {'SUCESSO' if success else 'FALHA'}")
        logger.info(f"‚è±Ô∏è Dura√ß√£o: {duration}s ({duration//60}min)")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante sincroniza√ß√£o di√°ria: {e}")
        return False

def run_continuous_sync():
    """Executa sincroniza√ß√£o cont√≠nua com agendamento"""
    logger.info("üîÑ MODO SINCRONIZA√á√ÉO CONT√çNUA")
    logger.info("=" * 50)
    
    try:
        # Inicializar componentes
        sync_manager = IncrementalSyncManager(use_redis=True)
        scheduler = ScheduledSyncRunner(sync_manager)
        
        # Configurar agendamentos
        logger.info("‚è∞ Configurando agendamentos...")
        
        # Sincroniza√ß√£o cr√≠tica (fixtures de hoje) - a cada 15 minutos
        schedule.every(15).minutes.do(
            lambda: sync_manager.sync_today_fixtures()
        ).tag('critical')
        
        # Sincroniza√ß√£o de fixtures recentes - a cada hora
        schedule.every().hour.do(
            lambda: sync_manager.sync_recent_fixtures()
        ).tag('hourly')
        
        # Sincroniza√ß√£o di√°ria completa - todo dia √†s 06:00
        schedule.every().day.at("06:00").do(
            lambda: sync_manager.run_daily_sync(include_standings=True)
        ).tag('daily')
        
        # Sincroniza√ß√£o de dados base - toda segunda √†s 02:00
        schedule.every().monday.at("02:00").do(
            lambda: sync_manager.sync_base_data_incremental()
        ).tag('weekly')
        
        logger.info("‚úÖ Agendamentos configurados:")
        logger.info("  ‚Ä¢ Fixtures cr√≠ticas: A cada 15 minutos")
        logger.info("  ‚Ä¢ Fixtures recentes: A cada hora")
        logger.info("  ‚Ä¢ Sincroniza√ß√£o completa: Di√°rio √†s 06:00")
        logger.info("  ‚Ä¢ Dados base: Segunda √†s 02:00")
        
        # Loop principal
        logger.info("üîÑ Iniciando loop de sincroniza√ß√£o...")
        
        while True:
            try:
                # Executar jobs agendados
                schedule.run_pending()
                
                # Verificar status a cada 5 minutos
                time.sleep(300)  # 5 minutos
                
                # Log de status (opcional)
                now = datetime.now()
                if now.minute % 30 == 0:  # A cada 30 minutos
                    status = sync_manager.get_sync_status()
                    logger.info(f"üíì Heartbeat - {now.strftime('%H:%M')} - Sistema ativo")
                
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Sincroniza√ß√£o interrompida pelo usu√°rio")
                break
            except Exception as e:
                logger.error(f"‚ùå Erro no loop de sincroniza√ß√£o: {e}")
                time.sleep(60)  # Pausa de 1 minuto antes de tentar novamente
        
        logger.info("üõë Sincroniza√ß√£o cont√≠nua finalizada")
        
    except Exception as e:
        logger.error(f"‚ùå Erro fatal na sincroniza√ß√£o cont√≠nua: {e}")

def run_smart_sync():
    """Executa sincroniza√ß√£o inteligente baseada na necessidade"""
    logger.info("üß† SINCRONIZA√á√ÉO INTELIGENTE")
    logger.info("=" * 50)
    
    try:
        # Inicializar componentes
        sync_manager = IncrementalSyncManager(use_redis=True)
        scheduler = ScheduledSyncRunner(sync_manager)
        
        # Verificar status atual
        status = sync_manager.get_sync_status()
        
        logger.info("üìä Status atual das sincroniza√ß√µes:")
        for sync_type, health in status['sync_health'].items():
            needs_sync = "‚úÖ NECESS√ÅRIA" if health['needs_sync'] else "‚è≠Ô∏è OK"
            logger.info(f"  ‚Ä¢ {sync_type}: {needs_sync} - {health['reason']}")
        
        # Executar apenas sincroniza√ß√µes necess√°rias
        results = scheduler.run_scheduled_syncs()
        
        if results:
            logger.info(f"üìä {len(results)} sincroniza√ß√µes executadas")
            for sync_type, result in results.items():
                success = "‚úÖ" if result.get('success', False) else "‚ùå"
                logger.info(f"  {success} {sync_type}")
        else:
            logger.info("‚è≠Ô∏è Nenhuma sincroniza√ß√£o necess√°ria no momento")
        
        return len(results) > 0
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante sincroniza√ß√£o inteligente: {e}")
        return False

def main():
    """Fun√ß√£o principal com op√ß√µes de execu√ß√£o"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Sistema de Sincroniza√ß√£o Incremental")
    parser.add_argument('--mode', choices=['once', 'continuous', 'smart'], 
                       default='once', help='Modo de execu√ß√£o')
    parser.add_argument('--force', action='store_true', 
                       help='For√ßar sincroniza√ß√£o mesmo se n√£o necess√°ria')
    
    args = parser.parse_args()
    
    print(f"üöÄ SISTEMA DE SINCRONIZA√á√ÉO INCREMENTAL")
    print(f"üìã Modo: {args.mode.upper()}")
    print("=" * 50)
    
    try:
        if args.mode == 'once':
            # Execu√ß√£o √∫nica
            success = run_daily_sync_once()
        elif args.mode == 'continuous':
            # Execu√ß√£o cont√≠nua
            run_continuous_sync()
            success = True
        elif args.mode == 'smart':
            # Execu√ß√£o inteligente
            success = run_smart_sync()
        else:
            logger.error(f"‚ùå Modo inv√°lido: {args.mode}")
            return False
        
        if success:
            print("\nüéâ SINCRONIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
        else:
            print("\n‚ö†Ô∏è SINCRONIZA√á√ÉO CONCLU√çDA COM PROBLEMAS")
        
        return success
        
    except Exception as e:
        logger.error(f"‚ùå Erro fatal: {e}")
        print(f"‚ùå Erro fatal: {e}")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        logger.error(f"‚ùå Erro durante execu√ß√£o: {str(e)}")
        sys.exit(1)
