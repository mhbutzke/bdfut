#!/usr/bin/env python3
"""
Script para gerar relat√≥rio final consolidado do enriquecimento das tabelas
"""

import os
import sys
import logging
from datetime import datetime
from supabase import create_client
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'/Users/mhbutzke/Documents/BDFut/bdfut/bdfut/logs/relatorio_final_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def get_supabase_client():
    """Obter cliente Supabase"""
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_KEY")
    
    if not supabase_url or not supabase_key:
        raise ValueError("SUPABASE_URL e SUPABASE_KEY devem estar configurados no .env")
    
    return create_client(supabase_url, supabase_key)

def gerar_relatorio_completo(supabase):
    """Gerar relat√≥rio completo do estado atual das tabelas"""
    logger.info("=" * 100)
    logger.info("üìä RELAT√ìRIO FINAL CONSOLIDADO - ENRIQUECIMENTO DAS TABELAS SUPABASE")
    logger.info("=" * 100)
    
    try:
        # Contar registros em todas as tabelas
        all_tables = [
            'leagues', 'seasons', 'teams', 'fixtures', 
            'match_events', 'match_statistics', 'match_lineups',
            'countries', 'states', 'types', 'venues', 
            'referees', 'players', 'coaches', 'stages'
        ]
        
        total_records = 0
        logger.info("\nüìã CONTAGEM FINAL DE REGISTROS POR TABELA:")
        logger.info("=" * 80)
        
        table_stats = {}
        for table in all_tables:
            try:
                response = supabase.table(table).select('*', count='exact').execute()
                count = response.count
                total_records += count
                table_stats[table] = count
                status = "‚úÖ" if count > 0 else "‚ùå"
                logger.info(f"{status} {table:20}: {count:>8,} registros")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è {table:20}: erro ao contar - {e}")
                table_stats[table] = 0
        
        logger.info("=" * 80)
        logger.info(f"üìä TOTAL GERAL: {total_records:>8,} registros")
        
        # An√°lise por categoria
        logger.info("\nüìà AN√ÅLISE POR CATEGORIA:")
        logger.info("=" * 80)
        
        # Dados principais
        main_data = table_stats.get('leagues', 0) + table_stats.get('seasons', 0) + table_stats.get('teams', 0)
        logger.info(f"üèÜ Dados Principais (leagues + seasons + teams): {main_data:,}")
        
        # Partidas e eventos
        match_data = table_stats.get('fixtures', 0) + table_stats.get('match_events', 0) + table_stats.get('match_statistics', 0) + table_stats.get('match_lineups', 0)
        logger.info(f"‚öΩ Partidas e Eventos (fixtures + events + stats + lineups): {match_data:,}")
        
        # Dados de refer√™ncia
        reference_data = table_stats.get('countries', 0) + table_stats.get('states', 0) + table_stats.get('types', 0) + table_stats.get('venues', 0) + table_stats.get('referees', 0) + table_stats.get('players', 0) + table_stats.get('coaches', 0)
        logger.info(f"üìö Dados de Refer√™ncia (countries + states + types + venues + referees + players + coaches): {reference_data:,}")
        
        # Estat√≠sticas espec√≠ficas
        logger.info("\nüìä ESTAT√çSTICAS ESPEC√çFICAS:")
        logger.info("=" * 80)
        
        # Fixtures por status
        try:
            fixtures_status = supabase.table('fixtures').select('status').execute()
            status_counts = {}
            for fixture in fixtures_status.data:
                status = fixture.get('status', 'unknown')
                status_counts[status] = status_counts.get(status, 0) + 1
            
            logger.info("‚öΩ Fixtures por status:")
            for status, count in sorted(status_counts.items(), key=lambda x: x[1], reverse=True):
                logger.info(f"   ‚Ä¢ {status:15}: {count:>6,} partidas")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao analisar status das fixtures: {e}")
        
        # Players por posi√ß√£o
        try:
            players_pos = supabase.table('players').select('position_name').not_.is_('position_name', 'null').execute()
            pos_counts = {}
            for player in players_pos.data:
                pos = player.get('position_name', 'unknown')
                pos_counts[pos] = pos_counts.get(pos, 0) + 1
            
            logger.info("\n‚öΩ Players por posi√ß√£o:")
            for pos, count in sorted(pos_counts.items(), key=lambda x: x[1], reverse=True):
                logger.info(f"   ‚Ä¢ {pos:15}: {count:>6,} jogadores")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao analisar posi√ß√µes dos jogadores: {e}")
        
        # Countries por continente
        try:
            countries_continent = supabase.table('countries').select('continent_id').not_.is_('continent_id', 'null').execute()
            continent_counts = {}
            continent_names = {1: "Europa", 2: "Am√©rica do Norte", 4: "Am√©rica do Sul", 3: "√Åsia", 5: "√Åfrica", 6: "Oceania"}
            
            for country in countries_continent.data:
                cid = country.get('continent_id')
                continent_counts[cid] = continent_counts.get(cid, 0) + 1
            
            logger.info("\nüåç Countries por continente:")
            for cid, count in sorted(continent_counts.items(), key=lambda x: x[1], reverse=True):
                continent_name = continent_names.get(cid, f"Continente {cid}")
                logger.info(f"   ‚Ä¢ {continent_name:15}: {count:>6,} pa√≠ses")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao analisar continentes: {e}")
        
        # Types por categoria
        try:
            types_model = supabase.table('types').select('model_type').not_.is_('model_type', 'null').execute()
            model_counts = {}
            for type_item in types_model.data:
                model = type_item.get('model_type', 'unknown')
                model_counts[model] = model_counts.get(model, 0) + 1
            
            logger.info("\nüìä Types por categoria:")
            for model, count in sorted(model_counts.items(), key=lambda x: x[1], reverse=True):
                logger.info(f"   ‚Ä¢ {model:15}: {count:>6,} tipos")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao analisar tipos: {e}")
        
        # Venues por capacidade
        try:
            venues_capacity = supabase.table('venues').select('capacity').not_.is_('capacity', 'null').execute()
            capacity_ranges = {
                'Pequeno (< 20k)': 0,
                'M√©dio (20k-50k)': 0,
                'Grande (50k-80k)': 0,
                'Muito Grande (> 80k)': 0
            }
            
            for venue in venues_capacity.data:
                capacity = venue.get('capacity', 0)
                if capacity < 20000:
                    capacity_ranges['Pequeno (< 20k)'] += 1
                elif capacity < 50000:
                    capacity_ranges['M√©dio (20k-50k)'] += 1
                elif capacity < 80000:
                    capacity_ranges['Grande (50k-80k)'] += 1
                else:
                    capacity_ranges['Muito Grande (> 80k)'] += 1
            
            logger.info("\nüèüÔ∏è Venues por capacidade:")
            for range_name, count in capacity_ranges.items():
                logger.info(f"   ‚Ä¢ {range_name:15}: {count:>6,} est√°dios")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao analisar capacidades dos est√°dios: {e}")
        
        # Resumo de qualidade dos dados
        logger.info("\nüéØ RESUMO DE QUALIDADE DOS DADOS:")
        logger.info("=" * 80)
        
        # Tabelas completamente populadas
        populated_tables = [table for table, count in table_stats.items() if count > 0]
        empty_tables = [table for table, count in table_stats.items() if count == 0]
        
        logger.info(f"‚úÖ Tabelas populadas: {len(populated_tables)}/{len(all_tables)}")
        logger.info(f"‚ùå Tabelas vazias: {len(empty_tables)}/{len(all_tables)}")
        
        if empty_tables:
            logger.info(f"   Tabelas vazias: {', '.join(empty_tables)}")
        
        # Tabelas com muitos dados
        large_tables = [table for table, count in table_stats.items() if count > 1000]
        logger.info(f"üìä Tabelas com muitos dados (>1000): {len(large_tables)}")
        for table in large_tables:
            logger.info(f"   ‚Ä¢ {table}: {table_stats[table]:,} registros")
        
        # Recomenda√ß√µes
        logger.info("\nüí° RECOMENDA√á√ïES:")
        logger.info("=" * 80)
        
        if table_stats.get('referees', 0) < 50:
            logger.info("üü® Considerar enriquecer mais √°rbitros da API")
        
        if table_stats.get('coaches', 0) < 50:
            logger.info("üë®‚Äçüíº Considerar enriquecer mais t√©cnicos da API")
        
        if table_stats.get('venues', 0) < 200:
            logger.info("üèüÔ∏è Considerar enriquecer mais est√°dios da API")
        
        if table_stats.get('players', 0) < 1000:
            logger.info("‚öΩ Considerar enriquecer mais jogadores da API")
        
        logger.info("\nüöÄ PR√ìXIMOS PASSOS SUGERIDOS:")
        logger.info("=" * 80)
        logger.info("1. Executar sincroniza√ß√£o incremental di√°ria")
        logger.info("2. Implementar monitoramento de qualidade dos dados")
        logger.info("3. Criar dashboards para visualiza√ß√£o dos dados")
        logger.info("4. Implementar alertas para dados faltantes")
        logger.info("5. Considerar enriquecimento com dados hist√≥ricos")
        
        logger.info("\n" + "=" * 100)
        logger.info("üéâ RELAT√ìRIO FINAL CONCLU√çDO!")
        logger.info("=" * 100)
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar relat√≥rio: {str(e)}")

def main():
    """Fun√ß√£o principal"""
    
    logger.info("üöÄ Gerando relat√≥rio final consolidado...")
    
    try:
        # Obter cliente Supabase
        supabase = get_supabase_client()
        logger.info("‚úÖ Cliente Supabase inicializado com sucesso")
        
        # Gerar relat√≥rio completo
        gerar_relatorio_completo(supabase)
        
    except Exception as e:
        logger.error(f"‚ùå Erro no processo principal: {str(e)}")
        raise

if __name__ == "__main__":
    main()
