# ============================================
# BDFut Makefile - DevOps Automation
# ============================================
# Automa√ß√£o completa para desenvolvimento, teste e produ√ß√£o

.PHONY: help install install-dev test lint format clean run setup
.PHONY: docker-build docker-run docker-dev docker-test docker-clean
.PHONY: ci cd deploy security monitoring debug
.PHONY: dev-setup dev-test dev-run dev-shell dev-logs
.PHONY: prod-setup prod-test prod-run prod-deploy
.PHONY: pre-commit pre-commit-update pre-commit-install
.PHONY: check coverage security-scan dependency-check
.PHONY: backup restore migrate rollback
.PHONY: status health logs metrics

help: ## Mostra esta ajuda
	@echo "BDFut - Comandos dispon√≠veis:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## Instala depend√™ncias b√°sicas
	pip install -e .

install-dev: ## Instala depend√™ncias de desenvolvimento
	pip install -e ".[dev]"
	pre-commit install
	pre-commit install --hook-type commit-msg

setup: ## Configura√ß√£o inicial do projeto
	@echo "üöÄ Configurando BDFut..."
	cp bdfut/config/secrets/env_example.txt .env
	@echo "üìù Edite o arquivo .env com suas credenciais"
	@echo "‚úÖ Configura√ß√£o inicial conclu√≠da!"

test: ## Executa testes
	pytest tests/ -v

test-cov: ## Executa testes com cobertura
	pytest tests/ --cov=bdfut --cov-report=html --cov-report=term-missing

lint: ## Executa linting
	flake8 bdfut/ tests/
	mypy bdfut/

format: ## Formata c√≥digo
	black bdfut/ tests/
	isort bdfut/ tests/

clean: ## Limpa arquivos tempor√°rios
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf build/
	rm -rf dist/
	rm -rf .coverage
	rm -rf htmlcov/
	rm -rf .pytest_cache/
	rm -rf .mypy_cache/

run: ## Executa CLI principal
	python -m bdfut.cli

run-legacy: ## Executa CLI legado
	python bdfut/cli_legacy.py

sync-base: ## Sincroniza dados base
	python -m bdfut.cli sync-base

sync-leagues: ## Sincroniza ligas principais
	python -m bdfut.cli sync-leagues

sync-full: ## Sincroniza√ß√£o completa
	python -m bdfut.cli full-sync

test-connection: ## Testa conex√µes
	python -m bdfut.cli test-connection

show-config: ## Mostra configura√ß√£o
	python -m bdfut.cli show-config

notebooks: ## Executa notebooks
	jupyter notebook notebooks/

docs: ## Gera documenta√ß√£o
	@echo "üìö Gerando documenta√ß√£o..."
	@echo "Documenta√ß√£o dispon√≠vel em docs/"

deploy: ## Deploy para produ√ß√£o
	@echo "üöÄ Fazendo deploy..."
	@echo "Configure suas credenciais de produ√ß√£o primeiro"

# ============================================
# DOCKER & INFRAESTRUTURA
# ============================================

docker-build: ## Build da imagem Docker (produ√ß√£o)
	@echo "üê≥ Fazendo build da imagem Docker..."
	./scripts/docker/build.sh --target production

docker-build-dev: ## Build da imagem Docker (desenvolvimento)
	@echo "üê≥ Fazendo build da imagem Docker (dev)..."
	./scripts/docker/build.sh --target development

docker-build-test: ## Build da imagem Docker (testes)
	@echo "üê≥ Fazendo build da imagem Docker (test)..."
	./scripts/docker/build.sh --target testing

docker-build-all: ## Build de todas as imagens
	@echo "üê≥ Fazendo build de todas as imagens..."
	./scripts/docker/build.sh --target production
	./scripts/docker/build.sh --target development
	./scripts/docker/build.sh --target testing

docker-run: ## Executa container Docker
	@echo "üöÄ Executando container Docker..."
	docker-compose up bdfut

docker-dev: ## Executa ambiente de desenvolvimento
	@echo "üöÄ Executando ambiente de desenvolvimento..."
	./scripts/docker/dev.sh up -d

docker-test: ## Executa testes em Docker
	@echo "üß™ Executando testes em Docker..."
	./scripts/docker/dev.sh test

docker-stop: ## Para todos os containers
	@echo "üõë Parando containers..."
	./scripts/docker/dev.sh down

docker-restart: ## Reinicia containers
	@echo "üîÑ Reiniciando containers..."
	./scripts/docker/dev.sh restart

docker-clean: ## Limpa containers e volumes
	@echo "üßπ Limpando containers e volumes..."
	./scripts/docker/dev.sh clean

docker-logs: ## Mostra logs dos containers
	@echo "üìã Mostrando logs dos containers..."
	./scripts/docker/dev.sh logs -f

docker-status: ## Status dos containers
	@echo "üìä Status dos containers..."
	./scripts/docker/dev.sh status

docker-shell: ## Shell no container principal
	@echo "üêö Abrindo shell no container..."
	./scripts/docker/dev.sh shell

docker-push: ## Push das imagens para registry
	@echo "üì§ Fazendo push das imagens..."
	./scripts/docker/build.sh --target production --push

docker-multi-platform: ## Build multi-platform
	@echo "üåç Fazendo build multi-platform..."
	./scripts/docker/build.sh --target production --multi-platform --push

pre-commit: ## Executa pre-commit hooks
	pre-commit run --all-files

pre-commit-update: ## Atualiza vers√µes dos pre-commit hooks
	pre-commit autoupdate

pre-commit-install: ## Instala/reinstala pre-commit hooks
	pre-commit install
	pre-commit install --hook-type commit-msg

# ============================================
# CI/CD & DEPLOY
# ============================================

check: lint test ## Executa todas as verifica√ß√µes
	@echo "‚úÖ Todas as verifica√ß√µes conclu√≠das!"

ci: install-dev check ## Executa pipeline de CI
	@echo "üîÑ Executando pipeline de CI..."
	@echo "‚úÖ Pipeline CI conclu√≠do!"

ci-full: install-dev pre-commit security-scan test-cov ## Pipeline CI completo
	@echo "üîÑ Executando pipeline CI completo..."
	@echo "‚úÖ Pipeline CI completo conclu√≠do!"

cd: ci docker-build docker-test ## Pipeline CD (Continuous Deployment)
	@echo "üöÄ Executando pipeline CD..."
	@echo "‚úÖ Pipeline CD conclu√≠do!"

deploy-staging: ci docker-build ## Deploy para staging
	@echo "üöÄ Fazendo deploy para staging..."
	@echo "‚ö†Ô∏è Configure staging environment"
	@echo "‚úÖ Deploy para staging conclu√≠do!"

deploy-prod: ci-full docker-build docker-push ## Deploy para produ√ß√£o
	@echo "üöÄ Fazendo deploy para produ√ß√£o..."
	@echo "‚ö†Ô∏è Configure produ√ß√£o environment"
	@echo "‚úÖ Deploy para produ√ß√£o conclu√≠do!"

release: ci-full docker-build-all docker-push ## Criar release
	@echo "üè∑Ô∏è Criando release..."
	@echo "‚ö†Ô∏è Configure version e tags"
	@echo "‚úÖ Release criado!"

rollback-deploy: ## Rollback da √∫ltima vers√£o
	@echo "‚è™ Fazendo rollback..."
	@echo "‚ö†Ô∏è Implementar rollback real"
	@echo "‚úÖ Rollback conclu√≠do!"

# ============================================
# DESENVOLVIMENTO
# ============================================

dev-setup: install-dev setup ## Configura√ß√£o completa para desenvolvimento
	@echo "üîß Configurando ambiente de desenvolvimento..."
	@echo "‚úÖ Ambiente pronto!"

dev-test: test-cov ## Testes completos para desenvolvimento
	@echo "üß™ Executando testes de desenvolvimento..."

dev-run: run ## Executa em modo desenvolvimento
	@echo "üöÄ Executando em modo desenvolvimento..."

dev-shell: ## Abre shell no container de desenvolvimento
	@echo "üêö Abrindo shell no container de desenvolvimento..."
	./scripts/docker/dev.sh shell bdfut-dev

dev-logs: ## Mostra logs do ambiente de desenvolvimento
	@echo "üìã Mostrando logs de desenvolvimento..."
	./scripts/docker/dev.sh logs -f bdfut-dev

dev-jupyter: ## Abre Jupyter Lab
	@echo "üìì Abrindo Jupyter Lab..."
	./scripts/docker/dev.sh jupyter

dev-redis: ## Conecta ao Redis
	@echo "üî¥ Conectando ao Redis..."
	./scripts/docker/dev.sh redis-cli

dev-monitoring: ## Sube stack de monitoramento
	@echo "üìä Subindo monitoramento..."
	./scripts/docker/dev.sh monitoring

dev-clean: ## Limpa ambiente de desenvolvimento
	@echo "üßπ Limpando ambiente de desenvolvimento..."
	./scripts/docker/dev.sh clean

# ============================================
# PRODU√á√ÉO
# ============================================

prod-setup: install ## Configura√ß√£o para produ√ß√£o
	@echo "üè≠ Configurando ambiente de produ√ß√£o..."

prod-test: test ## Testes para produ√ß√£o
	@echo "üß™ Executando testes de produ√ß√£o..."

prod-run: run ## Executa em modo produ√ß√£o
	@echo "üöÄ Executando em modo produ√ß√£o..."

prod-deploy: ## Deploy para produ√ß√£o
	@echo "üöÄ Fazendo deploy para produ√ß√£o..."
	@echo "‚ö†Ô∏è Configure suas credenciais de produ√ß√£o primeiro"
	./scripts/docker/build.sh --target production --push

prod-backup: ## Backup dos dados de produ√ß√£o
	@echo "üíæ Fazendo backup dos dados..."
	@echo "‚ö†Ô∏è Implementar backup real"

prod-restore: ## Restaura dados de produ√ß√£o
	@echo "üîÑ Restaurando dados..."
	@echo "‚ö†Ô∏è Implementar restore real"

# ============================================
# MONITORAMENTO & DEBUG
# ============================================

status: ## Status geral do sistema
	@echo "üìä Status do sistema BDFut:"
	@echo "================================"
	@echo "üê≥ Docker containers:"
	@docker-compose ps 2>/dev/null || echo "  Docker n√£o dispon√≠vel"
	@echo ""
	@echo "üìà Uso de recursos:"
	@docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" 2>/dev/null || echo "  Docker stats n√£o dispon√≠vel"
	@echo ""
	@echo "üíæ Espa√ßo em disco:"
	@df -h . | tail -1
	@echo ""
	@echo "üîç Processos Python:"
	@ps aux | grep python | grep -v grep | head -5 || echo "  Nenhum processo Python encontrado"

health: ## Verifica sa√∫de do sistema
	@echo "üè• Verificando sa√∫de do sistema..."
	@echo "================================"
	@echo "üê≥ Containers:"
	@docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}" 2>/dev/null || echo "  Docker n√£o dispon√≠vel"
	@echo ""
	@echo "üîó Conectividade:"
	@python -c "import requests; print('‚úÖ Internet OK')" 2>/dev/null || echo "‚ùå Internet n√£o dispon√≠vel"
	@echo ""
	@echo "üì¶ Depend√™ncias Python:"
	@python -c "import bdfut; print('‚úÖ BDFut OK')" 2>/dev/null || echo "‚ùå BDFut n√£o dispon√≠vel"

logs: ## Mostra logs do sistema
	@echo "üìã Logs do sistema BDFut:"
	@echo "================================"
	@echo "üê≥ Docker logs:"
	@docker-compose logs --tail=20 2>/dev/null || echo "  Docker n√£o dispon√≠vel"
	@echo ""
	@echo "üìÅ Logs locais:"
	@ls -la logs/ 2>/dev/null || echo "  Diret√≥rio logs/ n√£o encontrado"

metrics: ## Mostra m√©tricas do sistema
	@echo "üìä M√©tricas do sistema BDFut:"
	@echo "================================"
	@echo "üíæ Mem√≥ria:"
	@free -h 2>/dev/null || echo "  Comando free n√£o dispon√≠vel"
	@echo ""
	@echo "üíø Disco:"
	@df -h . | tail -1
	@echo ""
	@echo "üåê Rede:"
	@netstat -tuln | grep LISTEN | head -5 2>/dev/null || echo "  Comando netstat n√£o dispon√≠vel"

debug: ## Modo debug completo
	@echo "üêõ Debug completo do sistema BDFut:"
	@echo "================================"
	@echo "üìã Informa√ß√µes do sistema:"
	@uname -a
	@echo ""
	@echo "üêç Python:"
	@python --version
	@pip --version
	@echo ""
	@echo "üê≥ Docker:"
	@docker --version 2>/dev/null || echo "Docker n√£o instalado"
	@docker-compose --version 2>/dev/null || echo "Docker Compose n√£o instalado"
	@echo ""
	@echo "üì¶ Depend√™ncias:"
	@pip list | grep -E "(bdfut|supabase|requests)" || echo "Depend√™ncias n√£o encontradas"
	@echo ""
	@echo "üîß Configura√ß√£o:"
	@ls -la .env 2>/dev/null && echo "‚úÖ .env encontrado" || echo "‚ùå .env n√£o encontrado"
	@echo ""
	@echo "üìÅ Estrutura do projeto:"
	@ls -la | head -10

security-scan: ## Executa scan de seguran√ßa
	@echo "üîí Executando scan de seguran√ßa..."
	@echo "================================"
	@echo "üîç Bandit (Python security):"
	@bandit -r bdfut/ -f json -o bandit-report.json 2>/dev/null || echo "Bandit n√£o dispon√≠vel"
	@echo ""
	@echo "üì¶ Safety (dependencies):"
	@safety check --json --output safety-report.json 2>/dev/null || echo "Safety n√£o dispon√≠vel"
	@echo ""
	@echo "üê≥ Trivy (container security):"
	@trivy image bdfut:latest 2>/dev/null || echo "Trivy n√£o dispon√≠vel"
	@echo "‚úÖ Scan de seguran√ßa conclu√≠do!"

dependency-check: ## Verifica depend√™ncias
	@echo "üì¶ Verificando depend√™ncias..."
	@echo "================================"
	@echo "üêç Python packages:"
	@pip list --outdated | head -10 || echo "Nenhuma atualiza√ß√£o dispon√≠vel"
	@echo ""
	@echo "üîç Vulnerabilidades conhecidas:"
	@safety check --short-report 2>/dev/null || echo "Safety n√£o dispon√≠vel"
	@echo ""
	@echo "üìä Licen√ßas:"
	@pip-licenses --format=json 2>/dev/null | head -5 || echo "pip-licenses n√£o dispon√≠vel"

coverage: ## Relat√≥rio de cobertura
	@echo "üìä Gerando relat√≥rio de cobertura..."
	pytest --cov=bdfut --cov-report=html --cov-report=term-missing tests/
	@echo "‚úÖ Relat√≥rio gerado em htmlcov/index.html"

backup: ## Backup dos dados
	@echo "üíæ Fazendo backup dos dados..."
	@echo "================================"
	@mkdir -p backups
	@tar -czf backups/bdfut-backup-$(shell date +%Y%m%d-%H%M%S).tar.gz \
		bdfut/data/ bdfut/logs/ .env 2>/dev/null || echo "Erro no backup"
	@echo "‚úÖ Backup criado em backups/"

restore: ## Restaura dados do backup
	@echo "üîÑ Restaurando dados do backup..."
	@echo "‚ö†Ô∏è Especifique o arquivo de backup"
	@echo "Uso: make restore BACKUP_FILE=backups/bdfut-backup-YYYYMMDD-HHMMSS.tar.gz"
	@if [ -n "$(BACKUP_FILE)" ]; then \
		tar -xzf $(BACKUP_FILE); \
		echo "‚úÖ Restore conclu√≠do!"; \
	else \
		echo "‚ùå BACKUP_FILE n√£o especificado"; \
	fi

migrate: ## Executa migra√ß√µes
	@echo "üîÑ Executando migra√ß√µes..."
	@echo "‚ö†Ô∏è Implementar migra√ß√µes reais"
	@echo "‚úÖ Migra√ß√µes conclu√≠das!"

rollback: ## Rollback de migra√ß√µes
	@echo "‚è™ Fazendo rollback de migra√ß√µes..."
	@echo "‚ö†Ô∏è Implementar rollback real"
	@echo "‚úÖ Rollback conclu√≠do!"
