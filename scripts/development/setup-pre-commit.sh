#!/bin/bash
# ============================================
# BDFut Pre-commit Setup Script
# ============================================
# Este script configura e instala todos os pre-commit hooks
# para garantir qualidade de c√≥digo e seguran√ßa

set -e  # Exit on any error

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ BDFut Pre-commit Setup${NC}"
echo "========================================"

# Verificar se estamos no diret√≥rio correto
if [ ! -f ".pre-commit-config.yaml" ]; then
    echo -e "${RED}‚ùå Erro: .pre-commit-config.yaml n√£o encontrado${NC}"
    echo "Execute este script a partir do diret√≥rio raiz do projeto"
    exit 1
fi

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar Python
echo -e "${BLUE}üîç Verificando Python...${NC}"
if command_exists python3; then
    PYTHON_VERSION=$(python3 --version)
    echo -e "${GREEN}‚úÖ $PYTHON_VERSION encontrado${NC}"
else
    echo -e "${RED}‚ùå Python 3 n√£o encontrado${NC}"
    exit 1
fi

# Verificar pip
echo -e "${BLUE}üîç Verificando pip...${NC}"
if command_exists pip3; then
    echo -e "${GREEN}‚úÖ pip3 encontrado${NC}"
elif command_exists pip; then
    echo -e "${GREEN}‚úÖ pip encontrado${NC}"
else
    echo -e "${RED}‚ùå pip n√£o encontrado${NC}"
    exit 1
fi

# Instalar pre-commit se n√£o existir
echo -e "${BLUE}üì¶ Verificando pre-commit...${NC}"
if command_exists pre-commit; then
    echo -e "${GREEN}‚úÖ pre-commit j√° instalado${NC}"
    pre-commit --version
else
    echo -e "${YELLOW}‚ö†Ô∏è pre-commit n√£o encontrado, instalando...${NC}"
    pip3 install pre-commit
    echo -e "${GREEN}‚úÖ pre-commit instalado${NC}"
fi

# Instalar depend√™ncias de desenvolvimento
echo -e "${BLUE}üì¶ Instalando depend√™ncias de desenvolvimento...${NC}"
if [ -f "pyproject.toml" ]; then
    pip3 install -e ".[dev]"
    echo -e "${GREEN}‚úÖ Depend√™ncias de desenvolvimento instaladas${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è pyproject.toml n√£o encontrado, pulando depend√™ncias${NC}"
fi

# Instalar hooks do pre-commit
echo -e "${BLUE}üîß Instalando pre-commit hooks...${NC}"
pre-commit install

# Instalar hook de commit-msg para commitizen
echo -e "${BLUE}üîß Instalando commit-msg hook...${NC}"
pre-commit install --hook-type commit-msg

# Executar pre-commit em todos os arquivos para verificar
echo -e "${BLUE}üß™ Testando pre-commit hooks...${NC}"
echo -e "${YELLOW}‚ö†Ô∏è Isso pode demorar na primeira execu√ß√£o...${NC}"

if pre-commit run --all-files; then
    echo -e "${GREEN}‚úÖ Todos os hooks passaram!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è Alguns hooks falharam, mas isso √© normal na primeira execu√ß√£o${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Os hooks ir√£o corrigir automaticamente os problemas encontrados${NC}"
fi

# Verificar configura√ß√£o espec√≠fica do projeto
echo -e "${BLUE}üîç Verificando configura√ß√£o do projeto...${NC}"

# Verificar se .gitignore existe
if [ -f ".gitignore" ]; then
    echo -e "${GREEN}‚úÖ .gitignore encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è .gitignore n√£o encontrado${NC}"
fi

# Verificar se pyproject.toml existe
if [ -f "pyproject.toml" ]; then
    echo -e "${GREEN}‚úÖ pyproject.toml encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è pyproject.toml n√£o encontrado${NC}"
fi

# Criar arquivo de configura√ß√£o local se n√£o existir
if [ ! -f ".pre-commit-config.local.yaml" ]; then
    echo -e "${BLUE}üìù Criando configura√ß√£o local...${NC}"
    cat > .pre-commit-config.local.yaml << 'EOF'
# Local pre-commit configuration overrides
# This file is ignored by git and can be used for local customizations

repos:
  - repo: local
    hooks:
      - id: local-tests
        name: Run local tests
        entry: make test
        language: system
        pass_filenames: false
        always_run: false  # Set to true to run on every commit
EOF
    echo -e "${GREEN}‚úÖ Configura√ß√£o local criada${NC}"
fi

# Mostrar resumo final
echo ""
echo -e "${GREEN}üéâ Pre-commit setup conclu√≠do!${NC}"
echo "========================================"
echo -e "${BLUE}üìã Resumo:${NC}"
echo -e "  ‚úÖ Pre-commit instalado e configurado"
echo -e "  ‚úÖ Hooks instalados para commit e commit-msg"
echo -e "  ‚úÖ Depend√™ncias de desenvolvimento instaladas"
echo -e "  ‚úÖ Configura√ß√£o testada"
echo ""
echo -e "${BLUE}üîß Comandos √∫teis:${NC}"
echo -e "  ${YELLOW}pre-commit run --all-files${NC}    # Executar todos os hooks"
echo -e "  ${YELLOW}pre-commit run <hook-id>${NC}      # Executar hook espec√≠fico"
echo -e "  ${YELLOW}pre-commit autoupdate${NC}         # Atualizar vers√µes dos hooks"
echo -e "  ${YELLOW}pre-commit clean${NC}              # Limpar cache dos hooks"
echo ""
echo -e "${BLUE}üìö Documenta√ß√£o:${NC}"
echo -e "  Ver docs/devops/PRE_COMMIT_HOOKS.md para mais detalhes"
echo ""
echo -e "${GREEN}‚ú® Agora todos os commits ser√£o validados automaticamente!${NC}"
